axis.title = element_text(size = 10),
plot.title = element_text(size = 20,hjust = 0.5))+
labs(y = rep2, x= rep1,
title = paste0(Treatment,"treatment in ",Cell, " cells"))
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
install.packages("limma")
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
n
library(hexbin)
library(Hmisc)
library(grid)
install.packages(c("Hmisc","ChemometricsWithR", "scatterplot3d","WriteXLS","reshape","nlme","BlandAltmanLeh", "preprocessCore", "mice", "mixtools", "mclust")
install.packages(c("Hmisc","ChemometricsWithR", "scatterplot3d","WriteXLS","reshape","nlme","BlandAltmanLeh", "preprocessCore", "mice", "mixtools", "mclust")
install.packages(c("Hmisc","ChemometricsWithR", "scatterplot3d","WriteXLS","reshape","nlme","BlandAltmanLeh", "preprocessCore", "mice", "mixtools", "mclust"))
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
install.packages("preprocessCore")
biocLite("preprocessCore")
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
View(tab)
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
grp
x <- data.frame(grp)
View(x)
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
View(myColorRamp)
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/modT-developmental')
View(pca$loadings)
library(WriteXLS)
testPerl(perl = "perl", verbose = TRUE)
pca.loadings <- pca$loadings
pca.loadings <- as.data.frame(pca$loadings)
View(pca.loadings)
testPerl(perl = "perl", verbose = TRUE)
testPerl(perl = "perl", verbose = TRUE)
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
ggplot(data = final_significance, aes(x = number_of_significant,
y = reorder(treatments,number_of_significant)))+
geom_point(size = 3,aes(color=Cells))+
xlim(0,1800)+
facet_grid(. ~ Cells)+
theme_bw()+
theme(plot.title = element_text(size = 11,face = "bold", vjust = 1),
axis.title = element_text(size = 9),
axis.title.x = element_text(margin = margin(0,0,0,20)),
axis.text.y = element_text(size=8),
axis.text.x = element_text(size=8, angle = 45,face = "bold"),
plot.margin = unit(c(1,1,1,1),"cm"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color='grey60', linetype='dashed'),
strip.background = element_rect(fill = "darkblue"),
strip.text = element_text(colour = "white", size = 15))+
labs(y ="", x= "\nNumber of statistically significant proteins identified (FDR adj.p < 0.05)",
title = "")
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/CelgeneApp/Celgene')
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
install.packages("openintro")
install.packages("mapproj")
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
View(p.values.gct)
View(fdr.gct)
View(results.gct)
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
shiny::runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
View(results.gct)
runApp('C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce')
View(input.gct)
feature.exp <- input.gct[,1]
names(feature.exp)
feature.exp <- input.gct[,1]; names(feature.exp) <- row.names(input.gct)
head(feature.exp)
feature.index <- 1
gene.set.index <- 1:3
feature.index <- 1 # Only one value, selected feature
gene.set.index <- 1:3 # Can be multiple values, selected genesets
feature.exp <- input.gct[,feature.index]; names(feature.exp) <- row.names(input.gct)
feature.geneset <- data.frame(gset = row.names(results.gct)[gene.set.index],
NES = results.gct[gene.set.index,gene.set.index],
P.value = p.values.gct[gene.set.index,gene.set.index],
FDR = fdr.gct[gene.set.index,gene.set.index],
)
feature.index <- 1 # Only one value, selected feature
gene.set.index <- 1:3 # Can be multiple values, selected genesets
feature.exp <- input.gct[,feature.index]; names(feature.exp) <- row.names(input.gct)
feature.geneset <- data.frame(gset = row.names(results.gct)[gene.set.index],
NES = results.gct[gene.set.index,gene.set.index],
P.value = p.values.gct[gene.set.index,gene.set.index],
FDR = fdr.gct[gene.set.index,gene.set.index]
)
View(feature.geneset)
feature.index <- 1 # Only one value, selected feature
gene.set.index <- 1:3 # Can be multiple values, selected genesets
feature.exp <- input.gct[,feature.index]; names(feature.exp) <- row.names(input.gct)
feature.geneset <- data.frame(gset = row.names(results.gct)[gene.set.index],
NES = results.gct[gene.set.index,feature.index],
P.value = p.values.gct[gene.set.index,feature.index],
FDR = fdr.gct[gene.set.index,feature.index]
)
View(feature.geneset)
feature.name <- names(input.gct)[1]
feature.exp <- feature.exp[-is.na(feature.exp)]
feature.exp <- input.gct[,feature.index]; names(feature.exp) <- row.names(input.gct)
is.na(feature.exp)
sum(is.na(feature.exp))
feature.exp <- feature.exp[!is.na(feature.exp)]
sum(is.na(feature.exp))
feature.exp <- feature.exp[order(feature.exp)]
plot(feature.exp)
feature.exp <- input.gct[,feature.index]; names(feature.exp) <- row.names(input.gct)
feature.exp <- feature.exp[!is.na(feature.exp)] # remove missing values
feature.exp <- feature.exp[order(feature.exp,decreasing = TRUE)]
plot(feature.exp)
1e3
x <- 1:length(feature.exp)
y <- unname(feature.exp)
x <- 1:length(feature.exp)
y <- unname(feature.exp)
# positive expression
x.pos <- x[y>0]
y.pos <- y[y>0]
# negative expression
x.neg <- x[y<0]
y.neg <- y[y<0]
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = feature.name,
xlim=c(1, length(x)))
axis(2, las=2)
axis(1, cex=.9, at=seq(0, length(x), 1e3))
plot(x, y, type='l', ylab= "Expression ratio",axes=T, xlab='Rank',
main = feature.name,
xlim=c(1, length(x)))
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = feature.name,
xlim=c(1, length(x)))
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = feature.name,
xlim=c(1, length(x)))
axis(2, las=2)
axis(1, cex=.9, at=seq(0, length(x), 1e3))
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = feature.name,
xlim=c(1, length(x)))
axis(2, las=2)
axis(1, cex=.9, at=seq(0, length(x), 1e3))
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)))
axis(2, las=2)
axis(1, cex=.9, at=seq(0, length(x), 1e3))
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)))
axis(2, las=2)
axis(1, cex=.9, at=seq(0, length(x), 1e3))
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)))
axis(2, las=2, lwd = 2)
axis(1, cex=.9, at=seq(0, length(x), 1e3), lwd = 2)
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)), lwd = 2)
axis(2, las=2, lwd = 2)
axis(1, cex=.9, at=seq(0, length(x), 1e3), lwd = 2)
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)), lwd = 3)
axis(2, las=2, lwd = 2)
axis(1, cex=.9, at=seq(0, length(x), 1e3), lwd = 2)
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
View(feature.geneset)
seq_along(feature.geneset$gset)
setwd("C:/Users/ozan/Desktop/Ozan_R_utilities/Development/ssGSEA_taskforce")
gmt <- dir(pattern = ".gmt")
if(length(gmt == 1)){
genesets <- strsplit(readLines(gmt),"\t") # read as a list and access features
}else
warning("No or multiple gene sets.")
genesets[[1]]
genesets[1]
genesets[1]
grep(feature.geneset$gset[1],genesets)
sapply(genesets,function(x)x[[1]][1])
grep(feature.geneset$gset[1],geneset.names)
geneset.names <- sapply(genesets,function(x)x[[1]][1])
grep(feature.geneset$gset[1],geneset.names)
geneset.names
geneset.names$1
geneset.names[1]
feature.geneset$gset[1]
grep(feature.geneset$gset[3],geneset.names)
grepl(geneset.names,feature.geneset$gset)
geneset.names %in% feature.geneset$gset
geneset.subset <- genesets[geneset.names %in% feature.geneset$gset ]
seq_along(geneset.subset)
length(geneset.subset)
gs =1
geneset.subset[[gs]]
geneset.subset[[gs]][-c(1,2)]
match(geneset.subset.genes, names(feature.exp))
geneset.subset.genes <- geneset.subset[[gs]][-c(1,2)]
match(geneset.subset.genes, names(feature.exp))
cols <- rep('red', length(locs))
cols[y[locs] < 0] <- 'blue'
locs <- match(geneset.subset.genes, names(feature.exp))
## colors
cols <- rep('red', length(locs))
cols[y[locs] < 0] <- 'blue'
cols
plot(x[locs], rep(ypos, length(locs)), ylim=c(0, 1), axes=F, ylab='', xlab='', pch='|', col=cols, xlim=c(1, length(x)) )
ypos <- 1-cc*1/length(geneset.subset)
cc=0
ypos <- 1-cc*1/length(geneset.subset)
plot(x[locs], rep(ypos, length(locs)), ylim=c(0, 1), axes=F, ylab='', xlab='', pch='|', col=cols, xlim=c(1, length(x)) )
par(mfrow=c(2,1), mar=c(1,10,2,5))
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)), lwd = 2)
axis(2, las=2, lwd = 2)
axis(1, cex=.9, at=seq(0, length(x), 1e3), lwd = 2)
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
plot(x[locs], rep(ypos, length(locs)), ylim=c(0, 1), axes=F, ylab='', xlab='', pch='|', col=cols, xlim=c(1, length(x)) )
points(x[locs], rep(ypos, length(locs)), ylim=c(0, 1),ylab='', xlab='', pch='|', col=cols )
geneset.subset[[gs]][1]
View(feature.geneset)
w <- which(feature.geneset$gset == geneset.subset[[gs]][1])
dev.off()
par(mfrow=c(2,1), mar=c(1,10,2,5))
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)), lwd = 2)
axis(2, las=2, lwd = 2)
axis(1, cex=.9, at=seq(0, length(x), 1e3), lwd = 2)
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
plot(x[locs], rep(ypos, length(locs)), ylim=c(0, 1), axes=F, ylab='', xlab='', pch='|', col=cols, xlim=c(1, length(x)) )
## gene set name
mtext(geneset.subset[[gs]][1], side=2, at=ypos, las=2, cex=.7)
## ssGSEA NES,P.values and FDR
w <- which(feature.geneset$gset == geneset.subset[[gs]][1])
mtext(round(feature.geneset$NES[w],3), side=4, at=ypos, las=2, cex=.7, line=0, col= "black")
mtext(round(feature.geneset$P.value[w],3), side=4, at=ypos, las=2, cex=.7, line=0, col= "black")
mtext(round(feature.geneset$FDR[w],3), side=4, at=ypos, las=2, cex=.7, line=0, col= "black")
mtext('NES', side=4, at=1.1, cex=.9, las=2 )
mtext('p-val', side=4, at=1.1, cex=.9, las=2 )
mtext('FDR', side=4, at=1.1, cex=.9, las=2, line=3)
dev.off()
par(mfrow=c(2,1), mar=c(1,10,2,5))
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)), lwd = 2)
axis(2, las=2, lwd = 2)
axis(1, cex=.9, at=seq(0, length(x), 1e3), lwd = 2)
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
plot(x[locs], rep(ypos, length(locs)), ylim=c(0, 1), axes=F, ylab='', xlab='', pch='|', col=cols, xlim=c(1, length(x)) )
plot(x[locs], rep(ypos, length(locs)), ylim=c(0, 1), axes=F, ylab='', xlab='', pch='|', col=cols, xlim=c(1, length(x)) )
dev.off()
par(mfrow=c(2,1), mar=c(1,10,2,5))
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)), lwd = 2)
axis(2, las=2, lwd = 2)
axis(1, cex=.9, at=seq(0, length(x), 1e3), lwd = 2)
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
plot(x[locs], rep(ypos, length(locs)), ylim=c(0, 1), axes=F, ylab='', xlab='', pch='|', col=cols, xlim=c(1, length(x)) )
mtext(geneset.subset[[gs]][1], side=2, at=ypos, las=2, cex=.7)
## ssGSEA NES,P.values and FDR
w <- which(feature.geneset$gset == geneset.subset[[gs]][1])
mtext(round(feature.geneset$NES[w],3), side=4, at=ypos, las=2, cex=.7, line=0, col="black")
mtext(round(feature.geneset$P.value[w],3), side=4, at=ypos, las=2, cex=.7, line=2, col="black")
mtext(round(feature.geneset$FDR[w],3), side=4, at=ypos, las=2, cex=.7, line=4, col="black")
mtext('NES', side=4, at=1.1, cex=.9, las=2, line =0)
mtext('p-val', side=4, at=1.1, cex=.9, las=2, line =2)
mtext('FDR', side=4, at=1.1, cex=.9, las=2, line=4)
dev.off()
par(mfrow=c(2,1), mar=c(1,12,2,7))
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)), lwd = 2)
axis(2, las=2, lwd = 2)
axis(1, cex=.9, at=seq(0, length(x), 1e3), lwd = 2)
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
plot(x[locs], rep(ypos, length(locs)), ylim=c(0, 1), axes=F, ylab='', xlab='', pch='|', col=cols, xlim=c(1, length(x)) )
## gene set name
mtext(geneset.subset[[gs]][1], side=2, at=ypos, las=2, cex=.7)
## ssGSEA NES,P.values and FDR
w <- which(feature.geneset$gset == geneset.subset[[gs]][1])
mtext(round(feature.geneset$NES[w],3), side=4, at=ypos, las=2, cex=.7, line=0, col="black")
mtext(round(feature.geneset$P.value[w],3), side=4, at=ypos, las=2, cex=.7, line=2, col="black")
mtext(round(feature.geneset$FDR[w],3), side=4, at=ypos, las=2, cex=.7, line=4, col="black")
mtext('NES', side=4, at=1.1, cex=.9, las=2, line =0)
mtext('p-val', side=4, at=1.1, cex=.9, las=2, line =2)
mtext('FDR', side=4, at=1.1, cex=.9, las=2, line=4)
dev.off()
par(mfrow=c(2,1), mar=c(1,12,2,7))
plot(x, y, type='l', ylab= "Expression ratio",axes=F, xlab='Rank',
main = paste0("ssGSEA feature plot for ",feature.name),
xlim=c(1, length(x)), lwd = 2)
axis(2, las=2, lwd = 2)
axis(1, cex=.9, at=seq(0, length(x), 1e3), lwd = 2)
polygon(c(x.pos, 1),c(y.pos,0), col='red')
polygon(c(x.neg, length(x)),c(y.neg,0), col='blue')
legend('topright',
legend=c(paste('upregulated (n=', length(y.pos),')', sep=''),
paste('downregulated (n=', length(y.neg),')', sep='')),
fill=c('red', 'blue'), bty='n', ncol=1, cex=1.2)
##############################################
## add gene set stick diagrams
##############################################
# Get the relevant genesets
geneset.names <- sapply(genesets,function(x)x[[1]][1])
geneset.subset <- genesets[geneset.names %in% feature.geneset$gset ]
cc=0
for(gs in seq_along(geneset.subset)){
ypos <- 1-cc*1/length(geneset.subset)
geneset.subset.genes <- geneset.subset[[gs]][-c(1,2)]
##########################################
## match gene sets to data ranks
locs <- match(geneset.subset.genes, names(feature.exp))
## colors
cols <- rep('red', length(locs))
cols[y[locs] < 0] <- 'blue'
if(cc == 0)
plot(x[locs], rep(ypos, length(locs)), ylim=c(0, 1), axes=F, ylab='', xlab='', pch='|', col=cols, xlim=c(1, length(x)) )
else
points(x[locs], rep(ypos, length(locs)), ylim=c(0, 1),ylab='', xlab='', pch='|', col=cols )
## gene set name
mtext(geneset.subset[[gs]][1], side=2, at=ypos, las=2, cex=.7)
## ssGSEA NES,P.values and FDR
w <- which(feature.geneset$gset == geneset.subset[[gs]][1])
mtext(round(feature.geneset$NES[w],3), side=4, at=ypos, las=2, cex=.7, line=0, col="black")
mtext(round(feature.geneset$P.value[w],3), side=4, at=ypos, las=2, cex=.7, line=2, col="black")
mtext(round(feature.geneset$FDR[w],3), side=4, at=ypos, las=2, cex=.7, line=4, col="black")
mtext('NES', side=4, at=1.1, cex=.9, las=2, line =0)
mtext('p-val', side=4, at=1.1, cex=.9, las=2, line =2)
mtext('FDR', side=4, at=1.1, cex=.9, las=2, line=4)
cc=cc+1
}
View(feature.geneset)
runApp()
generate.GSEAplot(feature.name,feature.exp,feature.geneset,genesets)
runApp()
ssGSEAplot <- renderPlot({
####################
# Dev. purpose only
####################
feature.index <- 1 # Only one value, selected feature
gene.set.index <- 1:3 # Can be multiple values, selected genesets
feature.exp <- input.gct[,feature.index]; names(feature.exp) <- row.names(input.gct)
feature.geneset <- data.frame(gset = row.names(results.gct)[gene.set.index],
NES = results.gct[gene.set.index,feature.index],
P.value = p.values.gct[gene.set.index,feature.index],
FDR = fdr.gct[gene.set.index,feature.index]
)
feature.name <- names(input.gct)[1]
generate.GSEAplot(feature.name,feature.exp,feature.geneset,genesets)
})
ssGSEAplot()
runApp()
runApp()
runApp()
runApp()
source("ssGSEA.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
